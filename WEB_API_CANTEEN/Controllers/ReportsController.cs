using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
// QuestPDF
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;
using System.Globalization;
using WEB_API_CANTEEN.Models;

namespace WEB_API_CANTEEN.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize(Roles = "ADMIN")]
    public class ReportsController : ControllerBase
    {
        private readonly SmartCanteenDbContext _ctx;
        public ReportsController(SmartCanteenDbContext ctx)
        {
            _ctx = ctx;
            QuestPDF.Settings.License = LicenseType.Community;
        }

        // ====== OVERVIEW (JSON) ======
        [HttpGet("overview")]
        public IActionResult Overview([FromQuery] int tzOffsetMinutes = 0)
        {
            var ov = BuildOverview(tzOffsetMinutes);
            return Ok(ov);
        }

        // ====== REVENUE (JSON) ======
        [HttpGet("revenue")]
        public IActionResult Revenue([FromQuery] string granularity = "day",
                                     [FromQuery] DateTime? from = null,
                                     [FromQuery] DateTime? to = null,
                                     [FromQuery] int tzOffsetMinutes = 0)
        {
            var (buckets, fromUtc, toUtc, g) = BuildRevenue(granularity, from, to, tzOffsetMinutes);
            return Ok(new
            {
                granularity = g,
                from = fromUtc,
                to = toUtc,
                tzOffsetMinutes,
                totalOrders = buckets.Sum(b => b.Orders),
                totalRevenue = buckets.Sum(b => b.Revenue),
                data = buckets
            });
        }

        // ====== TOP ITEMS (JSON) ======
        [HttpGet("top-items")]
        public IActionResult TopItems([FromQuery] int limit = 5,
                                      [FromQuery] DateTime? from = null,
                                      [FromQuery] DateTime? to = null)
        {
            var data = BuildTopItems(limit, from, to);
            return Ok(data);
        }

        // ====== OVERVIEW (PDF) ======
        [HttpGet("overview/pdf")]
        public IActionResult OverviewPdf([FromQuery] int tzOffsetMinutes = 0)
        {
            var ov = BuildOverview(tzOffsetMinutes);

            using var ms = new MemoryStream();
            Document.Create(doc =>
            {
                doc.Page(p =>
                {
                    p.Margin(36);
                    p.Size(PageSizes.A4);
                    p.DefaultTextStyle(x => x.FontSize(11));

                    p.Header().Text(t =>
                    {
                        t.Span("SMART CANTEEN").SemiBold().FontSize(16);
                        t.Span(" — Báo cáo tổng quan");
                    });

                    p.Content().Column(col =>
                    {
                        col.Item().Text($"Múi giờ client offset: {tzOffsetMinutes} phút");
                        col.Item().Text($"Sinh lúc (UTC): {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}");

                        col.Item().Text("Hôm nay").SemiBold();
                        col.Item().Text(
                            $"Đơn: {ov.Today.Orders} | Doanh thu: {FormatMoney(ov.Today.Revenue)} | AOV: {FormatMoney(ov.Today.Aov)}");

                        col.Item().Text("Tuần này").SemiBold();
                        col.Item().Text(
                            $"Đơn: {ov.Week.Orders} | Doanh thu: {FormatMoney(ov.Week.Revenue)} | AOV: {FormatMoney(ov.Week.Aov)}");

                        col.Item().Text("Tháng này").SemiBold();
                        col.Item().Text(
                            $"Đơn: {ov.Month.Orders} | Doanh thu: {FormatMoney(ov.Month.Revenue)} | AOV: {FormatMoney(ov.Month.Aov)}");
                    });

                    p.Footer().AlignCenter().Text(t =>
                    {
                        t.Span("© ").FontSize(9);
                        t.Span(DateTime.UtcNow.Year.ToString()).FontSize(9);
                        t.Span(" Smart Canteen — Generated by Reports API").FontSize(9);
                    });

                });
            }).GeneratePdf(ms);

            return File(ms.ToArray(), "application/pdf", $"overview_{DateTime.UtcNow:yyyyMMddHHmmss}.pdf");
        }

        // ====== REVENUE (PDF) ======
        [HttpGet("revenue/pdf")]
        public IActionResult RevenuePdf([FromQuery] string granularity = "day",
                                        [FromQuery] DateTime? from = null,
                                        [FromQuery] DateTime? to = null,
                                        [FromQuery] int tzOffsetMinutes = 0)
        {
            var (buckets, fromUtc, toUtc, g) = BuildRevenue(granularity, from, to, tzOffsetMinutes);

            using var ms = new MemoryStream();
            Document.Create(doc =>
            {
                doc.Page(p =>
                {
                    p.Margin(36);
                    p.Size(PageSizes.A4);
                    p.DefaultTextStyle(x => x.FontSize(11));

                    p.Header().Text(t =>
                    {
                        t.Span("SMART CANTEEN").SemiBold().FontSize(16);
                        t.Span(" — Doanh thu theo ");
                        t.Span(g.ToUpperInvariant());
                    });

                    p.Content().Column(col =>
                    {
                        col.Item().Text($"Khoảng thời gian (UTC): {fromUtc:yyyy-MM-dd} → {toUtc.AddDays(-1):yyyy-MM-dd}");
                        col.Item().Text($"tzOffsetMinutes: {tzOffsetMinutes}");

                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(cols =>
                            {
                                cols.RelativeColumn(6); // Key
                                cols.RelativeColumn(2); // Orders
                                cols.RelativeColumn(3); // Revenue
                            });

                            table.Header(h =>
                            {
                                h.Cell().Text("Mốc").SemiBold();
                                h.Cell().AlignRight().Text("Đơn").SemiBold();
                                h.Cell().AlignRight().Text("Doanh thu").SemiBold();
                            });

                            foreach (var b in buckets)
                            {
                                table.Cell().Text(b.Key);
                                table.Cell().AlignRight().Text(b.Orders.ToString());
                                table.Cell().AlignRight().Text(FormatMoney(b.Revenue));
                            }

                            var totalOrders = buckets.Sum(x => x.Orders);
                            var totalRevenue = buckets.Sum(x => x.Revenue);

                            table.Cell().Text("TỔNG").SemiBold();
                            table.Cell().AlignRight().Text(totalOrders.ToString()).SemiBold();
                            table.Cell().AlignRight().Text(FormatMoney(totalRevenue)).SemiBold();
                        });
                    });

                    p.Footer().AlignCenter().Text(t =>
                    {
                        t.Span("© ").FontSize(9);
                        t.Span(DateTime.UtcNow.Year.ToString()).FontSize(9);
                        t.Span(" Smart Canteen — Revenue PDF").FontSize(9);
                    });

                });
            }).GeneratePdf(ms);

            return File(ms.ToArray(), "application/pdf", $"revenue_{g}_{DateTime.UtcNow:yyyyMMddHHmmss}.pdf");
        }

        // ====== TOP ITEMS (PDF) ======
        [HttpGet("top-items/pdf")]
        public IActionResult TopItemsPdf([FromQuery] int limit = 5,
                                         [FromQuery] DateTime? from = null,
                                         [FromQuery] DateTime? to = null)
        {
            var list = BuildTopItems(limit, from, to);

            using var ms = new MemoryStream();
            Document.Create(doc =>
            {
                doc.Page(p =>
                {
                    p.Margin(36);
                    p.Size(PageSizes.A4);
                    p.DefaultTextStyle(x => x.FontSize(11));

                    p.Header().Text(t =>
                    {
                        t.Span("SMART CANTEEN").SemiBold().FontSize(16);
                        t.Span(" — Top món bán chạy");
                    });

                    p.Content().Column(col =>
                    {
                        col.Item().Text($"Giới hạn: {limit} | Sinh lúc UTC: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}");

                        col.Item().Table(table =>
                        {
                            table.ColumnsDefinition(cols =>
                            {
                                cols.RelativeColumn(2); // ItemId
                                cols.RelativeColumn(6); // Name
                                cols.RelativeColumn(2); // Qty
                                cols.RelativeColumn(3); // Revenue
                            });

                            table.Header(h =>
                            {
                                h.Cell().Text("ItemId").SemiBold();
                                h.Cell().Text("Tên món").SemiBold();
                                h.Cell().AlignRight().Text("SL").SemiBold();
                                h.Cell().AlignRight().Text("Doanh thu").SemiBold();
                            });

                            foreach (var x in list)
                            {
                                table.Cell().Text(x.ItemId.ToString());
                                table.Cell().Text(x.Name);
                                table.Cell().AlignRight().Text(x.Qty.ToString());
                                table.Cell().AlignRight().Text(FormatMoney(x.Revenue));
                            }

                            var totalQty = list.Sum(i => i.Qty);
                            var totalRevenue = list.Sum(i => i.Revenue);

                            table.Cell().Text("TỔNG").SemiBold();
                            table.Cell().Text("");
                            table.Cell().AlignRight().Text(totalQty.ToString()).SemiBold();
                            table.Cell().AlignRight().Text(FormatMoney(totalRevenue)).SemiBold();
                        });
                    });

                    p.Footer().AlignCenter().Text(t =>
                    {
                        t.Span("© ").FontSize(9);
                        t.Span(DateTime.UtcNow.Year.ToString()).FontSize(9);
                        t.Span(" Smart Canteen — Top Items PDF").FontSize(9);
                    });
                });
            }).GeneratePdf(ms);

            return File(ms.ToArray(), "application/pdf", $"topitems_{DateTime.UtcNow:yyyyMMddHHmmss}.pdf");
        }

        // =================== Helpers & Models ===================

        private OverviewVm BuildOverview(int tzOffsetMinutes)
        {
            var nowUtc = DateTime.UtcNow;
            var todayLocal = nowUtc.AddMinutes(tzOffsetMinutes).Date;
            var weekStartLocal = StartOfIsoWeek(todayLocal);
            var monthStartLocal = new DateTime(todayLocal.Year, todayLocal.Month, 1);

            var todayStartUtc = todayLocal.AddMinutes(-tzOffsetMinutes);
            var weekStartUtc = weekStartLocal.AddMinutes(-tzOffsetMinutes);
            var monthStartUtc = monthStartLocal.AddMinutes(-tzOffsetMinutes);
            var tomorrowStartUtc = todayStartUtc.AddDays(1);

            var paid = _ctx.Orders.Where(o => o.PaymentStatus == "PAID");

            var today = paid.Where(o => o.CreatedAt >= todayStartUtc && o.CreatedAt < tomorrowStartUtc)
                            .GroupBy(_ => 1)
                            .Select(g => new { orders = g.Count(), revenue = g.Sum(x => x.Total) })
                            .FirstOrDefault() ?? new { orders = 0, revenue = 0m };

            var thisWeek = paid.Where(o => o.CreatedAt >= weekStartUtc && o.CreatedAt < tomorrowStartUtc)
                               .GroupBy(_ => 1)
                               .Select(g => new { orders = g.Count(), revenue = g.Sum(x => x.Total) })
                               .FirstOrDefault() ?? new { orders = 0, revenue = 0m };

            var thisMonth = paid.Where(o => o.CreatedAt >= monthStartUtc && o.CreatedAt < tomorrowStartUtc)
                                .GroupBy(_ => 1)
                                .Select(g => new { orders = g.Count(), revenue = g.Sum(x => x.Total) })
                                .FirstOrDefault() ?? new { orders = 0, revenue = 0m };

            decimal Aov(int orders, decimal revenue) => orders == 0 ? 0 : Math.Round(revenue / orders, 0);

            return new OverviewVm
            {
                TzOffsetMinutes = tzOffsetMinutes,
                Today = new AggVm { Orders = today.orders, Revenue = today.revenue, Aov = Aov(today.orders, today.revenue) },
                Week = new AggVm { Orders = thisWeek.orders, Revenue = thisWeek.revenue, Aov = Aov(thisWeek.orders, thisWeek.revenue) },
                Month = new AggVm { Orders = thisMonth.orders, Revenue = thisMonth.revenue, Aov = Aov(thisMonth.orders, thisMonth.revenue) }
            };
        }

        private (List<GroupBucket> buckets, DateTime fromUtc, DateTime toUtc, string g) BuildRevenue(
            string granularity, DateTime? from, DateTime? to, int tzOffsetMinutes)
        {
            var utcNow = DateTime.UtcNow;
            var fromUtc = from?.Date ?? utcNow.Date.AddDays(-7);
            var toUtc = (to?.Date ?? utcNow.Date).AddDays(1); // exclusive
            if (fromUtc >= toUtc) throw new ArgumentException("Khoảng thời gian không hợp lệ.");

            var paid = _ctx.Orders
                .Where(o => o.PaymentStatus == "PAID" && o.CreatedAt >= fromUtc && o.CreatedAt < toUtc)
                .Select(o => new { o.Id, o.Total, o.CreatedAt })
                .AsNoTracking()
                .ToList();

            var local = paid.Select(o => new { o.Id, o.Total, LocalTime = o.CreatedAt.AddMinutes(tzOffsetMinutes) }).ToList();

            var g = (granularity ?? "day").Trim().ToLowerInvariant();
            List<GroupBucket> buckets;

            if (g == "month")
            {
                buckets = local.GroupBy(x => new { x.LocalTime.Year, x.LocalTime.Month })
                    .Select(gp => new GroupBucket
                    {
                        Key = $"{gp.Key.Year:D4}-{gp.Key.Month:D2}",
                        Start = new DateTime(gp.Key.Year, gp.Key.Month, 1),
                        Orders = gp.Count(),
                        Revenue = gp.Sum(i => i.Total)
                    }).OrderBy(b => b.Start).ToList();
            }
            else if (g == "week")
            {
                buckets = local.GroupBy(x => StartOfIsoWeek(x.LocalTime))
                    .Select(gp => new GroupBucket
                    {
                        Key = $"{gp.Key:yyyy-MM-dd} (W{ISOWeek.GetWeekOfYear(gp.Key)})",
                        Start = gp.Key,
                        Orders = gp.Count(),
                        Revenue = gp.Sum(i => i.Total)
                    }).OrderBy(b => b.Start).ToList();
            }
            else
            {
                g = "day";
                buckets = local.GroupBy(x => x.LocalTime.Date)
                    .Select(gp => new GroupBucket
                    {
                        Key = $"{gp.Key:yyyy-MM-dd}",
                        Start = gp.Key,
                        Orders = gp.Count(),
                        Revenue = gp.Sum(i => i.Total)
                    }).OrderBy(b => b.Start).ToList();
            }

            return (buckets, fromUtc, toUtc, g);
        }

        private List<TopItemRow> BuildTopItems(int limit, DateTime? from, DateTime? to)
        {
            limit = Math.Clamp(limit, 1, 50);
            var utcNow = DateTime.UtcNow;
            var fromUtc = from?.Date ?? utcNow.Date.AddDays(-7);
            var toUtc = (to?.Date ?? utcNow.Date).AddDays(1);

            var paidOrderIds = _ctx.Orders
                .Where(o => o.PaymentStatus == "PAID" && o.CreatedAt >= fromUtc && o.CreatedAt < toUtc)
                .Select(o => o.Id);

            var q = from oi in _ctx.OrderItems
                    where paidOrderIds.Contains(oi.OrderId)
                    select new { oi.ItemId, oi.Qty, Name = oi.Item.Name, Price = oi.Item.Price };

            var data = q.GroupBy(x => new { x.ItemId, x.Name })
                        .Select(g => new TopItemRow
                        {
                            ItemId = g.Key.ItemId,
                            Name = g.Key.Name,
                            Qty = g.Sum(x => x.Qty),
                            Revenue = g.Sum(x => x.Qty * x.Price)
                        })
                        .OrderByDescending(x => x.Qty).ThenByDescending(x => x.Revenue)
                        .Take(limit)
                        .ToList();

            return data;
        }

        private static DateTime StartOfIsoWeek(DateTime dt)
        {
            var dow = (int)dt.DayOfWeek; // Sunday=0 ... Saturday=6
            var offset = dow == 0 ? 6 : dow - 1; // Monday=0 ... Sunday=6
            return dt.Date.AddDays(-offset);
        }

        private static string FormatMoney(decimal value) =>
            string.Format(CultureInfo.GetCultureInfo("vi-VN"), "{0:N0} đ", value);
    }

    // ====== Strong-typed view models ======
    public class OverviewVm
    {
        public int TzOffsetMinutes { get; set; }
        public AggVm Today { get; set; } = new();
        public AggVm Week { get; set; } = new();
        public AggVm Month { get; set; } = new();
    }

    public class AggVm
    {
        public int Orders { get; set; }
        public decimal Revenue { get; set; }
        public decimal Aov { get; set; }
    }

    public class GroupBucket
    {
        public string Key { get; set; } = "";
        public DateTime Start { get; set; }
        public int Orders { get; set; }
        public decimal Revenue { get; set; }
    }

    public class TopItemRow
    {
        public long ItemId { get; set; }
        public string Name { get; set; } = "";
        public int Qty { get; set; }
        public decimal Revenue { get; set; }
    }
}
